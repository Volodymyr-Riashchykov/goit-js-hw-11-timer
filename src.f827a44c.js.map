{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","Date","refs","fieldsDeys","document","querySelector","fieldsHours","fieldsMins","fieldsSecs","indicationTime","intervalId","setInterval","currentTime","time","clearInterval","timeText","days","Math","floor","textContent","String","padStart","hours","mins","secs","countdownTimer","startTimer"],"mappings":";AA2DA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3DMA,IAAAA,EAAAA,WACoC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAE7BA,KAAAA,WAAa,IAAIC,KAAKD,GAEtBE,KAAAA,KAAO,CACRC,WAAYC,SAASC,cAAiBN,GAAAA,OAAAA,EAD9B,+BAERO,YAAaF,SAASC,cAAiBN,GAAAA,OAAAA,EAF/B,gCAGRQ,WAAYH,SAASC,cAAiBN,GAAAA,OAAAA,EAH9B,+BAIRS,WAAYJ,SAASC,cAAiBN,GAAAA,OAAAA,EAA1B,gCAGXU,KAAAA,iBA+Cb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aA3CI,MAAA,WAAa,IAAA,EAAA,KACJC,KAAAA,WAAaC,YAAY,WAC1B,EAAKF,kBACN,OAwCX,CAAA,IAAA,iBArCI,MAAA,WACSG,KAAAA,YAAc,IAAIX,KAClBY,KAAAA,KAAO,KAAKb,WAAa,KAAKY,YAC/B,KAAKC,KAAO,IACZC,cAAc,KAAKJ,YACdG,KAAAA,KAAO,GAEXE,KAAAA,aA8Bb,CAAA,IAAA,WA3BI,MAAA,WACSC,KAAAA,KAAOC,KAAKC,MAAM,KAAKL,KAAQ,OAC/BX,KAAAA,KAAKC,WAAWgB,YAAcC,OAAO,KAAKJ,MAAMK,SAAS,EAAG,KAE5DC,KAAAA,MAAQL,KAAKC,MACb,KAAKL,KAAQ,MAAyB,MAEtCX,KAAAA,KAAKI,YAAYa,YAAcC,OAAO,KAAKE,OAAOD,SAAS,EAAG,KAE9DE,KAAAA,KAAON,KAAKC,MACZ,KAAKL,KAAQ,KAAoB,KAEjCX,KAAAA,KAAKK,WAAWY,YAAcC,OAAO,KAAKG,MAAMF,SAAS,EAAG,KAE5DG,KAAAA,KAAOP,KAAKC,MAAO,KAAKL,KAAQ,IAAc,KAC9CX,KAAAA,KAAKM,WAAWW,YAAcC,OAAO,KAAKI,MAAMH,SAAS,EAAG,SAYzE,EA3DMvB,GAsDA2B,EAAiB,IAAI3B,EAAe,CACtCC,SAAU,WACVC,WAAY,6BAEhByB,EAAeC","file":"src.f827a44c.js","sourceRoot":"..\\src","sourcesContent":["class CountdownTimer {\r\n    constructor({ selector, targetDate }) {\r\n        // this.selector = document.querySelector(selector);\r\n        this.targetDate = new Date(targetDate);\r\n        \r\n        this.refs = {\r\n            fieldsDeys: document.querySelector(`${selector} span[data-value = 'days']`),\r\n            fieldsHours: document.querySelector(`${selector} span[data-value = 'hours']`),\r\n            fieldsMins: document.querySelector(`${selector} span[data-value = 'mins']`),\r\n            fieldsSecs: document.querySelector(`${selector} span[data-value = 'secs']`)\r\n            \r\n        }\r\n        this.indicationTime();\r\n    \r\n    }\r\n\r\n    startTimer() {\r\n        this.intervalId = setInterval(() => {\r\n            this.indicationTime();\r\n        }, 1000);\r\n    }\r\n\r\n    indicationTime() {\r\n        this.currentTime = new Date();\r\n        this.time = this.targetDate - this.currentTime;\r\n        if (this.time < 0) {\r\n            clearInterval(this.intervalId);\r\n            this.time = 0;\r\n        }\r\n        this.timeText();\r\n    }\r\n\r\n    timeText() {\r\n        this.days = Math.floor(this.time / (1000 * 60 * 60 * 24));\r\n        this.refs.fieldsDeys.textContent = String(this.days).padStart(2, '0');\r\n        \r\n        this.hours = Math.floor(\r\n            (this.time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\r\n        );\r\n        this.refs.fieldsHours.textContent = String(this.hours).padStart(2, '0');\r\n        \r\n        this.mins = Math.floor(\r\n            (this.time % (1000 * 60 * 60)) / (1000 * 60),\r\n        );\r\n        this.refs.fieldsMins.textContent = String(this.mins).padStart(2, '0');\r\n        \r\n        this.secs = Math.floor((this.time % (1000 * 60)) / 1000);\r\n        this.refs.fieldsSecs.textContent = String(this.secs).padStart(2, '0')\r\n        \r\n    }\r\n\r\n    \r\n}\r\n\r\nconst countdownTimer = new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: 'december 19, 2021, 15:49',\r\n});\r\ncountdownTimer.startTimer();\r\n//"]}